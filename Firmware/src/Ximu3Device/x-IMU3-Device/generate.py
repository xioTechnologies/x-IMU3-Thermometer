import json
import os
import re

preamble = f"// This file was generated by {os.path.basename(__file__)}"


def split_words(string):
    return re.sub("[^0-9a-zA-Z]", " ", string).split()


def camel_case(string):
    return "".join([w.upper() if len(w) == 2 and w.isupper() else w.lower() if i == 0 else w.capitalize() for i, w in enumerate(split_words(string))])


def pascal_case(string):
    return "".join([w.upper() if len(w) == 2 and w == w.upper() else w.lower().capitalize() for w in split_words(string)])


def title_case(string):
    return " ".join(w[0].upper() + w[1:] for w in string.split())


def snake_case(string):
    return "_".join([w.lower() for w in split_words(string)])


# Load Settings.json
with open("Settings.json") as file:
    object = json.load(file)

    includes = object["includes"]
    settings = object["settings"]

# Generate Ximu3Definitions.h
includes = "\n".join([f"#include {i}" for i in includes])

values = "\n".join([f"    {s['declaration'].replace('name', camel_case(s['name']))};" for s in settings])

index = "\n".join([f"    Ximu3SettingsIndex{pascal_case(s['name'])}," for s in settings])

contents = f"""\
{preamble}

#ifndef XIMU3_DEFINITIONS_H
#define XIMU3_DEFINITIONS_H

{includes}

#define XIMU3_KEY_SIZE 64

#define XIMU3_VALUE_SIZE 512

#define XIMU3_OBJECT_SIZE 1024

#define XIMU3_MAX_KEY_LENGTH {max([len(s["name"]) for s in settings])}

#define XIMU3_NUMBER_OF_SETTINGS {len(settings)}

#define XIMU3_MUX_HEADER_SIZE 2

typedef enum {{
    Ximu3ResultOk,
    Ximu3ResultError,
}} Ximu3Result;

typedef struct {{
{values}
}} Ximu3SettingsValues;

typedef enum {{
{index}
}} Ximu3SettingsIndex;

Ximu3Result Ximu3SettingsIndexFrom(Ximu3SettingsIndex * const index, const int integer);

#endif
"""

with open("Ximu3Definitions.h", "w") as file:
    file.write(contents)

# Generate Ximu3Definitions.c
cases = "\n".join(
    [
        f"""\
        case Ximu3SettingsIndex{pascal_case(s["name"])}:
            *index = Ximu3SettingsIndex{pascal_case(s["name"])};
            break;"""
        for s in settings
    ]
)

contents = f"""\
{preamble}

#include "Ximu3Definitions.h"

Ximu3Result Ximu3SettingsIndexFrom(Ximu3SettingsIndex * const index, const int integer) {{
    switch (integer) {{
{cases}
        default:
            return Ximu3ResultError;
    }}
    return Ximu3ResultOk;
}}
"""

with open("Ximu3Definitions.c", "w") as file:
    file.write(contents)

# Generate Metadata.h
type = [title_case(s["declaration"].split()[0].replace("_t", "")) + ("Array" if "[" in s["declaration"] else "") for s in settings]
type = list(set(type))  # remove duplicates
type.sort()  # sort alphabetically
type = "\n".join([f"    MetadataType{t}," for t in type])

contents = f"""\
{preamble}

#ifndef METADATA_H
#define METADATA_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include "Ximu3Definitions.h"
#include "Ximu3Settings.h"

typedef enum {{
{type}
}} MetadataType;

typedef struct {{
    const char* const name;
    const char* const key;
    void* const value;
    const MetadataType type;
    const size_t size;
    const void* const defaultValue;
    const bool preserved;
    const bool readOnly;
    bool* const applied;
}} Metadata;

Metadata MetadataGet(Ximu3Settings * const settings, const Ximu3SettingsIndex index);

#endif
"""

with open("Metadata.h", "w") as file:
    file.write(contents)

# Generate Metadata.c
names = "\n".join([f'    "{title_case(s["name"])}",' for s in settings])

keys = "\n".join([f'    "{snake_case(s["name"])}",' for s in settings])

types = "\n".join([f"    MetadataType{title_case(s['declaration'].split()[0].replace('_t', '')) + ('Array' if '[' in s['declaration'] else '')}," for s in settings])

sizes = "\n".join([f"    sizeof (((Ximu3SettingsValues *) 0)->{camel_case(s['name'])})," for s in settings])

defaults = "\n".join([f"    (void*) (&({s['declaration'].replace(' name', '')}) {s['default']})," for s in settings])

preserveds = "\n".join([f"    {str(bool(s.get('preserved'))).lower()}," for s in settings])

read_onlys = "\n".join([f"    {str(bool(s.get('preserved')) or bool(s.get('read-only'))).lower()}," for s in settings])

template = """\
        case label:
            return &settings->values.member;
"""
cases = "".join([template.replace("label", f"Ximu3SettingsIndex{pascal_case(s['name'])}").replace("member", camel_case(s["name"])) for s in settings])

contents = f"""\
{preamble}

#include "Metadata.h"

static const char* const names[] = {{
{names}
}};

static const char* const keys[] = {{
{keys}
}};

const MetadataType types[] = {{
{types}
}};

const size_t sizes[] = {{
{sizes}
}};

const void* const defaults[] = {{
{defaults}
}};

const bool preserveds[] = {{
{preserveds}
}};

const bool readOnlys[] = {{
{read_onlys}
}};

static void* GetValue(Ximu3Settings * const settings, const Ximu3SettingsIndex index) {{
    switch (index) {{
{cases}
    }}
    return NULL; // avoid compiler warning
}}

Metadata MetadataGet(Ximu3Settings * const settings, const Ximu3SettingsIndex index) {{
    const Metadata metaData = {{
        .name = names[index],
        .key = keys[index],
        .value = GetValue(settings, index),
        .type = types[index],
        .size = sizes[index],
        .defaultValue = defaults[index],
        .preserved = preserveds[index],
        .readOnly = readOnlys[index],
        .applied = &settings->applied[index],
    }};
    return metaData;
}}
"""

with open("Metadata.c", "w") as file:
    file.write(contents)
